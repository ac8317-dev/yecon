#define TAG "native_libmad"   
  


typedef    signed long            T_S32;      /* signed 32 bit integer */


#define T_pFILE 		T_S32
#define     T_hFILE             T_S32


#define _CREATE 0//"wb+"//0
#define _RDONLY 1//"rb" // 1
#define _WRONLY 2//"wb"// 2
#define _RDWR   3//"rb+"// 3



#define _FMODE_READ     _RDONLY
#define _FMODE_WRITE    _WRONLY
#define _FMODE_CREATE   _CREATE
#define _FMODE_OVERLAY   _RDWR  


#define _FSEEK_CURRENT  1
#define _FSEEK_END      2
#define _FSEEK_SET      0
#define _FOPEN_FAIL     -1


#define SEEK_CURRENT  1
#define SEEK_CUR  1
#define SEEK_END      2
#define SEEK_SET      0

#define FS_SEEK_SET   0

#include <stdlib.h>   
#include <jni.h>   
#include <android/log.h>   
extern int NativeMP3Decoder_readSamples( short *target, int size);  
extern void  NativeMP3Decoder_closeAduioFile();  
extern int NativeMP3Decoder_getAduioSamplerate();  
extern int NativeMP3Decoder_init(char * filepath,unsigned long start);  
 
 
jint Java_com_conowen_libmad_NativeMP3Decoder_initAudioPlayer(JNIEnv *env, jobject obj, jstring file,jint startAddr)  
{  
      
   char* fileString = (*env)->GetStringUTFChars(env,file, NULL);
   
      
    return  NativeMP3Decoder_init(fileString,startAddr);  
 
}  
  
 jint Java_com_conowen_libmad_NativeMP3Decoder_getAudioBuf(JNIEnv *env, jobject obj ,jshortArray audioBuf,jint len)  
{  
   int bufsize = 0;  
   int ret = 0;  
    if (audioBuf != NULL) {  
        bufsize = (*env)->GetArrayLength(env, audioBuf);  
       jshort *_buf = (*env)->GetShortArrayElements(env, audioBuf, 0);  
        memset(_buf, 0, bufsize*2);  
        ret = NativeMP3Decoder_readSamples(_buf, len);  
        (*env)->ReleaseShortArrayElements(env, audioBuf, _buf, 0);  
    }  
    else{  
 
          //  __android_log_print(ANDROID_LOG_DEBUG, TAG, "getAudio failed");  
       }  
   return ret;  
}  
  
 jint Java_com_conowen_libmad_NativeMP3Decoder_getAudioSamplerate()  
{  
   return NativeMP3Decoder_getAduioSamplerate();  
}  
 
 
void Java_com_conowen_libmad_NativeMP3Decoder_closeAduioFile( )  
  
{  
   NativeMP3Decoder_closeAduioFile();  
  
}  
